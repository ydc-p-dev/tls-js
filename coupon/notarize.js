const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

let config;

const customConfig = path.join(__dirname, '..', 'output/temp', 'actions.json');
const configPath = path.join(__dirname, '..', 'site-config', 'actions.json');

const isCustomConfig = fs.existsSync(customConfig);
const configToLoad = isCustomConfig ? customConfig : configPath;

try {
  config = JSON.parse(fs.readFileSync(configToLoad, 'utf8'));
  console.log(`‚úÖ Loaded config from: ${configToLoad}`);
} catch (err) {
  console.error('‚ùå Failed to load config from:', configToLoad);
  console.error('Error:', err.message);
  throw err;
}


/**
 * –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ—Ç–∞—Ä–∏–∑–∞—Ü—ñ—é –¥–ª—è –¥–æ–º–µ–Ω—É
 * @param {string} domain - Target domain
 * @returns {Promise<Object>} Result object
 */
async function notarize(domain) {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –¥–æ–º–µ–Ω —ñ—Å–Ω—É—î –≤ –∫–æ–Ω—Ñ—ñ–≥—É
  if (!isCustomConfig && !config?.sites[domain]) {
    const available = Object.keys(config.sites).join(', ');
    throw new Error(
      `Configuration not found for domain: ${domain}\n` +
      `Available domains: ${available}\n` +
      `Add configuration to site-config/actions.json or use custom config`,
    );
  }

  const siteConfig = isCustomConfig ? config : config?.sites[domain];

  // –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ
  console.log('\nüöÄ TLSNotary Notarization');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üéØ Domain:     ', domain);
  console.log('üåê URL:        ', siteConfig?.requestParams?.applyCouponUrl);
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

  // Environment variables
  const env = {
    ...process.env,
    TARGET_DOMAIN: domain,
  };

  // –ó–∞–ø—É—Å–∫–∞—î–º–æ Playwright —ñ –ª–æ–≤–∏–º–æ –ø–æ–º–∏–ª–∫–∏ –∑ stdout/stderr
  return new Promise((resolve, reject) => {
    let isResolved = false;
    let stdoutBuffer = '';
    let stderrBuffer = '';

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑ pipe –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è output
    const playwright = spawn('npx', ['playwright', 'test'], {
      env,
      stdio: ['inherit', 'pipe', 'pipe'], // stdin: inherit, stdout/stderr: pipe
      cwd: path.resolve(__dirname, '..')
    });

    // –ß–∏—Ç–∞—î–º–æ stdout
    playwright.stdout.on('data', (data) => {
      const output = data.toString();
      stdoutBuffer += output;

      // –í–∏–≤–æ–¥–∏–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å
      process.stdout.write(output);

      // –®—É–∫–∞—î–º–æ –º–∞—Ä–∫–µ—Ä–∏ –ø–æ–º–∏–ª–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
      if (detectError(output)) {
        console.error('\nüîç Error detected in browser output!');

        if (!isResolved) {
          isResolved = true;

          // Gracefully kill process
          playwright.kill('SIGTERM');

          setTimeout(() => {
            if (!playwright.killed) {
              playwright.kill('SIGKILL');
            }
          }, 3000);

          const errorInfo = extractErrorInfo(stdoutBuffer + stderrBuffer);

          resolve({
            success: false,
            error: {
              message: errorInfo.message || 'Browser error detected',
              type: errorInfo.type || 'browser_error',
              details: errorInfo.details,
            },
            domain: domain,
            timestamp: new Date().toISOString(),
          });
        }
      }
    });

    // –ß–∏—Ç–∞—î–º–æ stderr
    playwright.stderr.on('data', (data) => {
      const output = data.toString();
      stderrBuffer += output;

      // –í–∏–≤–æ–¥–∏–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å
      process.stderr.write(output);

      // –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –≤ stderr
      if (detectCriticalError(output)) {
        console.error('\nüîç Critical error detected in stderr!');

        if (!isResolved) {
          isResolved = true;

          playwright.kill('SIGTERM');

          setTimeout(() => {
            if (!playwright.killed) {
              playwright.kill('SIGKILL');
            }
          }, 3000);

          const errorInfo = extractErrorInfo(stderrBuffer);

          resolve({
            success: false,
            error: {
              message: errorInfo.message || 'Critical stderr error',
              type: 'stderr_error',
              details: errorInfo.details,
            },
            domain: domain,
            timestamp: new Date().toISOString(),
          });
        }
      }
    });

    // –ö–æ–ª–∏ –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–∏–≤—Å—è
    playwright.on('close', (code) => {
      if (isResolved) {
        return; // –í–∂–µ –æ–±—Ä–æ–±–∏–ª–∏ —á–µ—Ä–µ–∑ detectError
      }

      isResolved = true;

      if (code === 0) {
        console.log('\n‚úÖ Notarization completed successfully!');
        resolve({
          success: true,
          domain: domain,
          timestamp: new Date().toISOString()
        });
      } else {
        console.log('\n‚ùå Notarization failed with code:', code);

        const errorInfo = extractErrorInfo(stdoutBuffer + stderrBuffer);

        resolve({
          success: false,
          error: {
            code,
            message: errorInfo.message || `Process exited with code ${code}`,
            type: errorInfo.type || 'playwright_error',
            details: errorInfo.details,
          },
          domain: domain,
          timestamp: new Date().toISOString(),
        });
      }
    });

    playwright.on('error', (err) => {
      if (isResolved) {
        return;
      }

      isResolved = true;
      console.error('‚ùå Spawn error:', err.message);

      resolve({
        success: false,
        error: {
          message: err.message,
          type: 'spawn_error',
        },
        domain: domain,
        timestamp: new Date().toISOString(),
      });
    });

    // –û–±—Ä–æ–±–∫–∞ SIGTERM –¥–ª—è graceful shutdown
    process.on('SIGTERM', () => {
      if (playwright && !playwright.killed) {
        playwright.kill('SIGTERM');
      }
    });

    process.on('SIGINT', () => {
      if (playwright && !playwright.killed) {
        playwright.kill('SIGTERM');
      }
    });
  });
}

/**
 * –î–µ—Ç–µ–∫—Ç—É—î –ø–æ–º–∏–ª–∫–∏ –≤ output
 * @param {string} output - Output text
 * @returns {boolean}
 */
function detectError(output) {
  const errorPatterns = [
    /Error/i,
    /error/i,
  ];

  // –í–∏–∫–ª—é—á–µ–Ω–Ω—è - –Ω–µ –ø–æ–º–∏–ª–∫–∏
  const excludePatterns = [
    /failed to clear/i,
    /Failed notarization using websocket/i,
    /connection reset by peer/i,
    /connection closed/i,
    /remote closed connection/i,
    /mux connection closed/i,
  ];

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤–∏–∫–ª—é—á–µ–Ω–Ω—è
  for (const pattern of excludePatterns) {
    if (pattern.test(output)) {
      return false;
    }
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–º–∏–ª–∫–∏
  for (const pattern of errorPatterns) {
    if (pattern.test(output)) {
      return true;
    }
  }

  return false;
}

/**
 * –î–µ—Ç–µ–∫—Ç—É—î –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –≤ stderr
 * @param {string} output - Stderr text
 * @returns {boolean}
 */
function detectCriticalError(output) {
  const criticalPatterns = [
    /ERROR/,
    /FATAL/i,
    /verifier error/i,
    /commit error/i,
    /connection is closed/i,
  ];

  // –Ü–≥–Ω–æ—Ä—É—î–º–æ DEBUG —Ç–∞ INFO –≤ stderr
  if (/DEBUG|INFO/i.test(output)) {
    return false;
  }

  for (const pattern of criticalPatterns) {
    if (pattern.test(output)) {
      return true;
    }
  }

  return false;
}

/**
 * –í–∏—Ç—è–≥—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ output
 * @param {string} output - Full output
 * @returns {Object} Error info
 */
function extractErrorInfo(output) {
  const lines = output.split('\n');
  let message = 'Unknown error';
  let type = 'unknown';
  let details = [];

  // –®—É–∫–∞—î–º–æ —Ä—è–¥–∫–∏ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];

    // Notary errors
    if (line.includes('verifier error') || line.includes('commit error')) {
      type = 'notary_error';
      message = 'Notary server error: connection is closed';
      details.push(line.trim());
    }

    // Browser errors
    else if (line.includes('[Browser Error]')) {
      type = 'browser_error';
      message = line.replace(/.*\[Browser Error\]:\s*/i, '').trim();
      details.push(line.trim());
    }

    // Connection errors
    else if (line.includes('ECONNREFUSED') || line.includes('connection refused')) {
      type = 'connection_error';
      message = 'Cannot connect to notary server';
      details.push(line.trim());
    }

    // Timeout errors
    else if (line.includes('timeout') || line.includes('timed out')) {
      type = 'timeout_error';
      message = 'Request timed out';
      details.push(line.trim());
    }

    // Test failures
    else if (line.includes('Error:') && i + 1 < lines.length) {
      type = 'test_error';
      message = lines[i + 1].trim() || line.trim();
      details.push(line.trim());
    }

    // Generic errors
    else if (line.includes('‚ùå') || /error:/i.test(line)) {
      if (!message || message === 'Unknown error') {
        message = line.replace(/.*‚ùå\s*/i, '').trim();
        details.push(line.trim());
      }
    }
  }

  return {
    message,
    type,
    details: details.slice(0, 5), // –¢—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 5 –¥–µ—Ç–∞–ª–µ–π
  };
}

// –ï–∫—Å–ø–æ—Ä—Ç
module.exports = {
  notarize
};